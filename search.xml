<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/15/hello-world/"/>
      <url>/2025/04/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Resource Acquisition Is Initialization</title>
      <link href="/2023/09/10/RAII%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
      <url>/2023/09/10/RAII%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>本质特征： <div style="color: red"> 利用对象的声明周期管理资源</div><br>特点：1、在对象创建时托管资源<br>2、在对象销毁时，释放资源<br>3、提供若干访问资源的额方法<br>4、一般不能进行复制或者赋值，表现的是<strong>对象语义</strong></p><blockquote><p>对象语义：表示在世界中客观存在，例如批量生产的计算机或者汽车，具体针对某一个计算机或者汽车表现的是对象语义，这个汽车是独一无二存在，不可复制</p></blockquote><blockquote><p>值语义：可以进行复制或者赋值</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-language-c"><code class="language-language-c">#include <iostream>using std::endl;using std::cout;template<typename Type>class RAII &#123;public:    //2、定义类型的构造函数和析构函数    RAII(Type *p)    :_p(p)    &#123;        cout << "RAII(*p)" << endl;    &#125;        ~RAII()&#123;        if(_p)&#123;            delete _p;        &#125;        cout << "~RAII()" << endl;    &#125;        //3、运算符重载    Type * operator->()&#123;        return _p;    &#125;        Type & operator*()&#123;        return *_p;    &#125;        Type* get() const     &#123; return _p; &#125;        //4、为了体现对象语义，不能复制或者赋值，即将拷贝构造和赋值运算符私有化或者删除    RAII(const RAII &) = delete;    RAII & operator=(const RAII& rhs) = delete;    private:    //1、定义一个模板类型指针    Type * _p;    &#125;;//自定义类型class Point&#123;public:     Point(int x, int y)    :_x(x)    ,_y(y)    &#123;        cout << "Point(x, y)" << endl;    &#125;        ~Point()    &#123;        cout << "~Point()" << endl;    &#125;    private:    int _x;    int _y;&#125;;int main()&#123;    RAII<Point> raii(new Point(3, 4)); //用RAII托管类型    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果</li></ul><h2 id="四种智能指针"><a href="#四种智能指针" class="headerlink" title="四种智能指针"></a>四种智能指针</h2><h3 id="1、auto-ptr-（C-17中已被弃用）"><a href="#1、auto-ptr-（C-17中已被弃用）" class="headerlink" title="1、auto_ptr （C++17中已被弃用）"></a>1、auto_ptr （C++17中已被弃用）</h3><ul><li>源码位置：&#x2F;usr&#x2F;include&#x2F;c++&#x2F;7&#x2F;memory &#x3D;&#x3D;&gt; &#x2F;usr&#x2F;include&#x2F;c++&#x2F;7&#x2F;backward&#x2F;auto_ptr.h</li><li>弃用原因：<ul><li>在auto_ptr源码中，首先没有禁用拷贝构造和赋值运算符，并且在源码中当一个</li><li>auto_ptr p1 &#x3D; p2 的时候，源码中p2已经被置为nullptr,不能够再进行使用了</li><li>导致错误</li></ul></li></ul><h3 id="2、unique-ptr"><a href="#2、unique-ptr" class="headerlink" title="2、unique_ptr"></a>2、unique_ptr</h3><p>unique_ptr禁用了拷贝构造和赋值，但是保留了移动构造函数。</p><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">unique_ptr<Point> getValue()&#123;  unique_ptr<Point> up2(new Point(12, 13));  return up2&#125;unique_ptr<Point> up2 = getValue(); //此时调用的是移动语义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">//将up2存储到容器中vector<unique_ptr<Point>> numbers;numbers.push_back(up2) //error 这个时候会调用拷贝构造numbers.push_back(std::move(up2)) //ok。但此时up2为nullptrup2.reset(new Point(13, 14)) //重新托管一个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、share-ptr"><a href="#3、share-ptr" class="headerlink" title="3、share_ptr"></a>3、share_ptr</h3><ul><li>1、针对于unique_ptr的所有属性share_ptr都适配</li><li>2、share_ptr既有拷贝构造有又有赋值运算符。（都有移动语义）</li><li>3、当将sp使用移动语义进行赋值之后，其本身不再托管原来的对象。</li></ul><pre class="line-numbers language-language-c++"><code class="language-language-c++">shared_ptr<Point> sp1(new Point(1, 1));vector<shared_ptr<Point>> points;points.push(sp); //此时会调用拷贝构造函数，sp1的引用计数+1points.push(std::move(sp)); // 此时会调用移动构造函数，sp的引用计数，sp1不再托管原来的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>4、对于shared_ptr当已有use_count为1时，再进行reset操作，先将use_count减去1，如果为0则释放资源，否则不进行任何操作。</li><li>5、shared_ptr的问题：循环引用<ul><li>例如：A类中有一个shared_ptr指向B类，B类中有一个shared_ptr指向A类, use_count无法归0，这样就会导致内存泄漏。</li><li>解决方法：使用weak_ptr来解决循环引用的问题。</li></ul></li></ul><pre class="line-numbers language-language-mermaid"><code class="language-language-mermaid"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、weak-ptr"><a href="#4、weak-ptr" class="headerlink" title="4、weak_ptr"></a>4、weak_ptr</h3><ul><li>1、弱引用智能指针</li><li>2、特点：<ul><li>1、weak_ptr进行赋值或赋值时，不会引起引用计数增加</li><li>2、&#x3D;&#x3D;他不能访问托管对象的资源&#x3D;&#x3D;，没有重载解引用和成员访问运算符</li><li>3、他知道所托管对象是否还存活，使用expired()方法来判断</li><li>4、想访问资源必须通过lock()方法进行提升，来获取shared_ptr对象</li><li>5、可以查看托管对象的引用计数</li></ul></li><li>3、循环引用解决方法：<ul><li>将A 或者 B中的引用修改为weak_ptr</li></ul></li></ul><h2 id="删除器"><a href="#删除器" class="headerlink" title="删除器"></a>删除器</h2><h3 id="1、自己理解"><a href="#1、自己理解" class="headerlink" title="1、自己理解"></a>1、自己理解</h3><p>上面的讲述中主要针对堆空间的资源管理，对于一些file资源进行释放的时候需要自定义删除器来使用<br>自己写，发现不会使用<span style="color: red"><strong>FILE文件指针</strong></span>(重点复习)</p><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">struct MyFileDeleter&#123;   void operator()(FILE* fp)&#123;        if(fp)&#123;           fclose(fp);           cout << "fclose()" << endl;        &#125;   &#125;   &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>完善RAII</li></ul><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">#include <iostream>using std::endl;using std::cout;template<typename Type>class DefaultDeleter&#123;      void operator()(Type* tp)&#123;        if(tp)&#123;           delete tp;        &#125;   &#125;&#125;;template<typename Type, class Deleter = DefaultDeleter<Type>>class RAII &#123;public:    //2、定义类型的构造函数和析构函数    RAII(Type *p)    :_p(p)    ,_deleter()    &#123;        cout << "RAII(*p)" << endl;    &#125;        ~RAII()&#123;        if(_p)&#123;            _deleter(_p);            _p = nullptr;        &#125;        cout << "~RAII()" << endl;    &#125;        //3、运算符重载    Type * operator->()&#123;        return _p;    &#125;        Type & operator*()&#123;        return *_p;    &#125;        Type* get() const     &#123; return _p; &#125;        //4、为了体现对象语义，不能复制或者赋值，即将拷贝构造和赋值运算符私有化或者删除    RAII(const RAII &) = delete;    RAII & operator=(const RAII& rhs) = delete;    private:    //1、定义一个模板类型指针    Type * _p;        Deleter _deleter;&#125;;//自定义类型class Point&#123;public:     Point(int x, int y)    :_x(x)    ,_y(y)    &#123;        cout << "Point(x, y)" << endl;    &#125;        ~Point()    &#123;        cout << "~Point()" << endl;    &#125;    private:    int _x;    int _y;&#125;;int main()&#123;    RAII<Point> raii(new Point(3, 4)); //用RAII托管类型    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、讲解"><a href="#2、讲解" class="headerlink" title="2、讲解"></a>2、讲解</h3><blockquote><p><code>unique_ptr</code>是在模板中定义了一个删除器，传递的是一个类型，在这个类中实现一个删除器类的实例化，进行删除</p></blockquote><p><img src="/images/raii/img_2.png"></p><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">unique_ptr<FILE, MyFileDeleter> up(fopen("demo.txt", "a+"));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在<code>shared_ptr</code>中，则是在构造函数中实现了一个构造函数，需要传递具体的对象进去</p></blockquote><p><img src="/images/raii/img.png" alt="模板实现"><br><img src="/images/raii/img_1.png" alt="构造函数"></p><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">shared_ptr<FILE> sp(fopen("demo.txt", "a+"), MyFileDeleter());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="智能指针的错误使用"><a href="#智能指针的错误使用" class="headerlink" title="智能指针的错误使用"></a>智能指针的错误使用</h2><p>1、将一个堆空间指针交给两个智能指针管理</p><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">Point * pt = new Point(1, 2);unique_ptr<Point> up1(pt);unique_ptr<Point> up2(pt); //错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、将一个已经被智能指针托管的内容使用reset交给其他智能指针托管</p><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">shared_ptr<Point> sp1(new Point(1, 2));shared_ptr<Point> sp2(new Point(12, 23));sp2.reset(sp1.get()); //这行代码会引发问题。// sp1.get() 返回的是 sp1 所管理对象的原始指针，// 当调用 sp2.reset(sp1.get()) 时，sp2 会接管该原始指针，// 这就导致两个 shared_ptr（sp1 和 sp2）管理同一个对象，然而它们并不知道彼此的存在。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、对象中返回一个智能指针</p><blockquote><p>希望在类内部获取本对象的智能指针<br>1、先继承自辅助类 enable_shared_from_this<br>2、调用成员函数shared_from_this()</p></blockquote><pre class="line-numbers language-language-cpp"><code class="language-language-cpp">class Point: public std::enable_shared_from_this<Point>&#123;public:  Point(int x, int y)  :_x(x)  ,_y(y)  &#123;  &#125;    ~Point()  &#123;    &#125;   // Point * addPoint(Point &pt) //error返回的是原生指针，无法再托管给其他智能指针  shared_ptr<Point> addPoint(Point &pt)&#123;      _x += pt._x;      _y += pt._y;      // return shared_ptr<Point>(this) //error 犯了第二种错误，this是原生指针      return shared_from_this()  &#125;private:    int _x;    int _y;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感谢Hexo 和 hexo-theme-matery</title>
      <link href="/2022/09/07/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/07/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>非常感谢这篇文章：<a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/#1-%E5%89%8D%E8%A8%80">GitHub + Hexo</a> 从零开始搭建个人博客 ，参考的这篇文章。<br>来源: Moonのblog<br>文章作者: Moon<br>文章链接: <a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/">https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p><h2 id="Hexo-theme-matery使用方法"><a href="#Hexo-theme-matery使用方法" class="headerlink" title="Hexo-theme-matery使用方法"></a>Hexo-theme-matery使用方法</h2><p><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">使用说明</a><br><a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/">最佳实践</a></p><p><img src="/images/blog/image.png" alt="博客标题栏说明"></p><blockquote><p>注意:<br>1、如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br>2、date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。<br>3、如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
