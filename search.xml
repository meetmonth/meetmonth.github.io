<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/15/hello-world/"/>
      <url>/2025/04/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Resource Acquisition Is Initialization</title>
      <link href="/2023/09/10/RAII%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
      <url>/2023/09/10/RAII%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>本质特征： <div style="color: red"> 利用对象的声明周期管理资源</div><br>特点：1、在对象创建时托管资源<br>2、在对象销毁时，释放资源<br>3、提供若干访问资源的额方法<br>4、一般不能进行复制或者赋值，表现的是<strong>对象语义</strong></p><blockquote><p>对象语义：表示在世界中客观存在，例如批量生产的计算机或者汽车，具体针对某一个计算机或者汽车表现的是对象语义，这个汽车是独一无二存在，不可复制</p></blockquote><blockquote><p>值语义：可以进行复制或者赋值</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RAII</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//2、定义类型的构造函数和析构函数</span></span><br><span class="line">    <span class="built_in">RAII</span>(Type *p)</span><br><span class="line">    :_p(p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;RAII(*p)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">RAII</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(_p)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _p;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~RAII()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3、运算符重载</span></span><br><span class="line">    Type * <span class="keyword">operator</span>-&gt;()&#123;</span><br><span class="line">        <span class="keyword">return</span> _p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Type &amp; <span class="keyword">operator</span>*()&#123;</span><br><span class="line">        <span class="keyword">return</span> *_p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Type* <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> _p; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4、为了体现对象语义，不能复制或者赋值，即将拷贝构造和赋值运算符私有化或者删除</span></span><br><span class="line">    <span class="built_in">RAII</span>(<span class="type">const</span> RAII &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    RAII &amp; <span class="keyword">operator</span>=(<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//1、定义一个模板类型指针</span></span><br><span class="line">    Type * _p;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">    :_x(x)</span><br><span class="line">    ,_y(y)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Point(x, y)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Point</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _x;</span><br><span class="line">    <span class="type">int</span> _y;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">RAII&lt;Point&gt; <span class="title">raii</span><span class="params">(<span class="keyword">new</span> Point(<span class="number">3</span>, <span class="number">4</span>))</span></span>; <span class="comment">//用RAII托管类型</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><h2 id="四种智能指针"><a href="#四种智能指针" class="headerlink" title="四种智能指针"></a>四种智能指针</h2><h3 id="1、auto-ptr-（C-17中已被弃用）"><a href="#1、auto-ptr-（C-17中已被弃用）" class="headerlink" title="1、auto_ptr （C++17中已被弃用）"></a>1、auto_ptr （C++17中已被弃用）</h3><ul><li>源码位置：&#x2F;usr&#x2F;include&#x2F;c++&#x2F;7&#x2F;memory &#x3D;&#x3D;&gt; &#x2F;usr&#x2F;include&#x2F;c++&#x2F;7&#x2F;backward&#x2F;auto_ptr.h</li><li>弃用原因：<ul><li>在auto_ptr源码中，首先没有禁用拷贝构造和赋值运算符，并且在源码中当一个</li><li>auto_ptr p1 &#x3D; p2 的时候，源码中p2已经被置为nullptr,不能够再进行使用了</li><li>导致错误</li></ul></li></ul><h3 id="2、unique-ptr"><a href="#2、unique-ptr" class="headerlink" title="2、unique_ptr"></a>2、unique_ptr</h3><p>unique_ptr禁用了拷贝构造和赋值，但是保留了移动构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;Point&gt; <span class="title">getValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">unique_ptr&lt;Point&gt; <span class="title">up2</span><span class="params">(<span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">13</span>))</span></span>;</span><br><span class="line">  <span class="keyword">return</span> up2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;Point&gt; up2 = <span class="built_in">getValue</span>(); <span class="comment">//此时调用的是移动语义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将up2存储到容器中</span></span><br><span class="line">vector&lt;unique_ptr&lt;Point&gt;&gt; numbers;</span><br><span class="line">numbers.<span class="built_in">push_back</span>(up2) <span class="comment">//error 这个时候会调用拷贝构造</span></span><br><span class="line">numbers.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(up2)) <span class="comment">//ok。但此时up2为nullptr</span></span><br><span class="line"></span><br><span class="line">up<span class="number">2.</span><span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Point</span>(<span class="number">13</span>, <span class="number">14</span>)) <span class="comment">//重新托管一个值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、share-ptr"><a href="#3、share-ptr" class="headerlink" title="3、share_ptr"></a>3、share_ptr</h3><ul><li>1、针对于unique_ptr的所有属性share_ptr都适配</li><li>2、share_ptr既有拷贝构造有又有赋值运算符。（都有移动语义）</li><li>3、当将sp使用移动语义进行赋值之后，其本身不再托管原来的对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;Point&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">vector&lt;shared_ptr&lt;Point&gt;&gt; points;</span><br><span class="line">points.<span class="built_in">push</span>(sp); <span class="comment">//此时会调用拷贝构造函数，sp1的引用计数+1</span></span><br><span class="line">points.<span class="built_in">push</span>(std::<span class="built_in">move</span>(sp)); <span class="comment">// 此时会调用移动构造函数，sp的引用计数，sp1不再托管原来的对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>4、对于shared_ptr当已有use_count为1时，再进行reset操作，先将use_count减去1，如果为0则释放资源，否则不进行任何操作。</li><li>5、shared_ptr的问题：循环引用<ul><li>例如：A类中有一个shared_ptr指向B类，B类中有一个shared_ptr指向A类, use_count无法归0，这样就会导致内存泄漏。</li><li>解决方法：使用weak_ptr来解决循环引用的问题。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、weak-ptr"><a href="#4、weak-ptr" class="headerlink" title="4、weak_ptr"></a>4、weak_ptr</h3><ul><li>1、弱引用智能指针</li><li>2、特点：<ul><li>1、weak_ptr进行赋值或赋值时，不会引起引用计数增加</li><li>2、&#x3D;&#x3D;他不能访问托管对象的资源&#x3D;&#x3D;，没有重载解引用和成员访问运算符</li><li>3、他知道所托管对象是否还存活，使用expired()方法来判断</li><li>4、想访问资源必须通过lock()方法进行提升，来获取shared_ptr对象</li><li>5、可以查看托管对象的引用计数</li></ul></li><li>3、循环引用解决方法：<ul><li>将A 或者 B中的引用修改为weak_ptr</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感谢Hexo 和 hexo-theme-matery</title>
      <link href="/2022/09/07/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/07/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>非常感谢这篇文章：<a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/#1-%E5%89%8D%E8%A8%80">GitHub + Hexo</a> 从零开始搭建个人博客 ，参考的这篇文章。<br>来源: Moonのblog<br>文章作者: Moon<br>文章链接: <a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/">https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p><h2 id="Hexo-theme-matery使用方法"><a href="#Hexo-theme-matery使用方法" class="headerlink" title="Hexo-theme-matery使用方法"></a>Hexo-theme-matery使用方法</h2><p><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">使用说明</a><br><a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/">最佳实践</a></p><p><img src="/images/blog/image.png" alt="博客标题栏说明"></p><blockquote><p>注意:<br>1、如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br>2、date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。<br>3、如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
